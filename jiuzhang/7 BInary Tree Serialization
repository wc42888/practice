/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
    string serialize(TreeNode *root) {
        // write your code herer
        vector<TreeNode*> Q;
        Q.push_back(root);
        
        for(int i = 0 ; i < Q.size(); ++i){
            TreeNode* cur = Q[i];
            
            if(cur==NULL){
                continue;
            }
            
            Q.push_back(cur->left);
            Q.push_back(cur->right);
        }
        
        if(Q.size()>0 && Q[Q.size()-1]==NULL){
            Q.pop_back();
        }
        
        if(Q.size()==0){
            return "{}";
        }
        
        stringstream result;
        
        result<<"{"<<Q[0]->val;
        
        for (int i =1; i<Q.size(); ++i){
            if(Q[i] == NULL){
                result<<",#";
            }
            else{
                result<<","<<Q[i]->val;
            }
        }
        
        result<<"}";
        
        return result.str();
        
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    TreeNode *deserialize(string data) {
        // write your code here
        if(data=="{}"){
            return NULL;
        }
        
        vector<string> vals = split(data.substr(1,data.size()-2),",");
        TreeNode* root = new TreeNode (stoi(vals[0]));
        
        queue<TreeNode*> Q;
        Q.push(root);
        
        bool isLeftChild = true;
        
        for(int i=1; i<vals.size(); ++i){
            if (vals[i] != "#") {
                TreeNode *node = new TreeNode(stoi(vals[i]));
                if (isLeftChild) {
                    Q.front()->left = node;
                } else {
                    Q.front()->right = node;
                }
                Q.push(node);
            }
            if (!isLeftChild) {
                Q.pop();
            }

            isLeftChild = !isLeftChild; 
            
        }
        
        return root;
    }
    
        vector<string> split(const string &data, string delim){
        vector<string> result;
        int lastIndex = 0, index;
        
        while((index=data.find(delim, lastIndex))!=string::npos){
            result.push_back(data.substr(lastIndex, index-lastIndex));
            lastIndex = index + delim.size();
        }
        
        if(lastIndex!=data.length()){
            result.push_back(data.substr(lastIndex, data.length()-lastIndex));
        }
        
        return result;
    }

};


