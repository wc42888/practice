/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 
 
class Solution {
    /**
     * @param root : The root of binary tree.
     * @return : buttom-up level order a list of lists of integer
     */
public:
    vector<vector<int>> levelOrderBottom(TreeNode *root) {
        // write your code here
        
        if(!root){
            return vector<vector<int>>();
        }
        
        stack<vector<int>> result;
        vector<vector<int>> answer;
        
        queue<TreeNode*> unvisited;
        unvisited.push(root);
        
        while(!unvisited.empty()){
            vector<int> nodes;
            int size = unvisited.size();
            
            for(int i = 0; i<size; ++i){
                TreeNode* cur = unvisited.front();
                nodes.push_back(cur->val);
                
                if(cur->left){
                    unvisited.push(cur->left);
                }
                if(cur->right){
                    unvisited.push(cur->right);
                }
                
                unvisited.pop();
            }
            result.push(nodes);
        }
        
        int size = result.size();
        
        while(!result.empty()){
            answer.push_back(result.top());
            result.pop();
        }
        
        return answer;
    }
};
