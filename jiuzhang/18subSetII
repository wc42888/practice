class Solution {
public:
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    vector<vector<int> > subsetsWithDup(const vector<int> &S) {
        // write your code here
        vector<vector<int>> results;
        
        if(S.empty()){
            results.push_back(vector<int>());
            return results;
        }
        
        vector<int> nums = S;
        sort(nums.begin(), nums.end());
        vector<int> subset;
        int startIndex = 0;
        
        helper(nums, startIndex, subset, results);
        
        return results;
    }
    
    void helper(const vector<int>& nums, int startIndex, vector<int>& subset, vector<vector<int>>& results ){
        
        if(subset.size()>=nums.size()){
            results.push_back(subset);
            return;
        }
        
        results.push_back(subset);
        
        for(int i = startIndex; i<nums.size(); ++i){
            if(i!=startIndex && nums[i]==nums[i-1]){
                continue;
            }
            
            subset.push_back(nums[i]);
            helper(nums, i+1, subset, results);
            subset.pop_back();
        }
    }
};

