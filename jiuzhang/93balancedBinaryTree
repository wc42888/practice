/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
     class dataType{
        public:
            bool ifBalanced;
            int maxDepth;
            dataType(bool balanced, int depth): ifBalanced(balanced), maxDepth(depth){}
    };
 

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */

    
    bool isBalanced(TreeNode *root) {
        // write your code here
        
        return helper(root).ifBalanced;
    }
    
    dataType helper(TreeNode* root){
        
        if(!root){
            return dataType(true, 0);
        }
        
        dataType left = helper(root->left);
        dataType right = helper(root->right);
        
        if(!left.ifBalanced || !right.ifBalanced){
            return dataType(false, -1);
        }
        
        if(abs(left.maxDepth-right.maxDepth)>1){
            return dataType(false, -1);
        }
        
        return dataType(true, max(left.maxDepth, right.maxDepth)+1);
    }
};


/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

 

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */

    
    bool isBalanced(TreeNode *root) {
        // write your code here
        
        return maxDepth(root)!=-1;
    }
    
    int maxDepth(TreeNode* root){
        if(!root){
            return 0;
        }
        
        int left = maxDepth(root->left);
        int right = maxDepth(root->right);
        
        if(left==-1 || right == -1 || abs(left-right)>1){
            return -1;
        }
        
        return max(left, right)+1;
    }
    

};
