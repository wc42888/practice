/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector<DirectedGraphNode *> neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    vector<DirectedGraphNode*> topSort(vector<DirectedGraphNode*> graph) {
        // write your code here
        
        if(!graph.size()){
            return vector<DirectedGraphNode*>();
        }
        
        vector<DirectedGraphNode*> result;
        map<DirectedGraphNode*, int> indegree = findIndegree(graph);
        
        /*for(auto& n:indegree){
            cout<<"node "<<n.first->label<<" with indegree"<<n.second<< endl;
        }*/
        
        queue<DirectedGraphNode*> zeroIndegree;
        
        for(auto& n:indegree){
            if(n.second==0){
                zeroIndegree.push(n.first);
            }
        }
        
        while(!zeroIndegree.empty()){
            DirectedGraphNode* cur = zeroIndegree.front();
            zeroIndegree.pop();
            result.push_back(cur);
            
            for(int i = 0; i<(cur->neighbors).size();++i){
                DirectedGraphNode* curNeighbor = (cur->neighbors)[i];
                --indegree[curNeighbor];
                if(!indegree[curNeighbor]){
                    zeroIndegree.push(curNeighbor);
                }
            }
            
        }
        
        return result;
    }
    
    
    map<DirectedGraphNode*, int> findIndegree(vector<DirectedGraphNode*> graph){
        map<DirectedGraphNode*, int> indegree;

        for(int i = 0; i<graph.size();++i){
            indegree[graph[i]]=0;
        }
        
        for(int i = 0; i<graph.size(); ++i){
            DirectedGraphNode* curNode = graph[i];
            for(int j = 0; j<(curNode->neighbors).size(); ++j){
                DirectedGraphNode* curNeighbor = (curNode->neighbors)[j];
                ++indegree[curNeighbor];
            }
        }
        
        return indegree;
    }
};
